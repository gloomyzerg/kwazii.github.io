<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python二级 on Kwazii.top</title>
    <link>https://kwazii.top/tags/python%E4%BA%8C%E7%BA%A7/</link>
    <description>Recent content in python二级 on Kwazii.top</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jun 2022 13:40:46 +0800</lastBuildDate><atom:link href="https://kwazii.top/tags/python%E4%BA%8C%E7%BA%A7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第十一课 计算思维</title>
      <link>https://kwazii.top/kids/python/chapter-11/</link>
      <pubDate>Fri, 10 Jun 2022 13:40:46 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-11/</guid>
      <description>写在前面 在此之前，我们学习了很多Python的基础理论知识，但或许我们有一个困惑，就是它们究竟有什么用。那么从本节开始，我们将要解决一些编程的实际问题。
本节目标 写一点真实的程序   剔除数字
  用户随意输入一段可能包含数字和字母的字符串
  删除字符串中的数字，然后输出一串没有数字的字符串
  输出的非数字的字符顺序不变
    数字转汉字
  用户输入一个1-9的任意数字，输出对应的汉字
  用户可重复输入数字，程序不退出
    求质数
 提示用户输入两个正整数，求出两个数之间的所有质数    总结回顾 首先，恭喜你熬出头了，终于写出了一些看起来有实际意义的应用程序了。
本节通过三个真实的需求，去了解编写程序过程。通过需求分析，问题拆解，程序设计，再将之前课程中的知识灵活运用、组合出一段代码。虽然这些代码看起来还很简单，但你要明白再复杂的程序，都是通过这些看似简单的功能点，一点点堆叠起来的。
编程的过程就是把一个复杂的问题拆解为一个个简单的问题并实现它。随着学习的深入，我们能解决越来越多的“简单问题”，并最终构建一个“复杂”的应用程序。
本节作业   出租车计价器
题目要求：
提示用户输入一个数字作为里程数（公里数）， 计算出称作出租车应该支付的费用
计算方式如下：
  3公里以内起步价10元
  超过3公里的部分，每公里2元
  超过12公里的，超过部分每公里加收50%的空驶费
    </description>
    </item>
    
    <item>
      <title>第十课 流程控制</title>
      <link>https://kwazii.top/kids/python/chapter-10/</link>
      <pubDate>Fri, 10 Jun 2022 00:51:45 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-10/</guid>
      <description>本节目标 程序的基本结构 结构化程序设计思想是最早由E.W.Dijikstra在1965年提出的，结构化程序设计思想确实使程序执行效率提高。程序的出错率和维护费用大大减少。结构程序设计就是一种进行程序设计的原则和方法，按照这种原则和方法可设计出结构清晰、容易理解、容易修改、容易验证的程序。结构化程序设计的目标在于使程序具有一个合理结构，以保证和验证程序的正确性，从而开发出正确、合理的程序。
结构化程序设计，主要有以下三种基本结构：顺序结构、选择结构（分支结构）和循环结构，由这三种基本结构可以组合出任意复杂的程序。换句话说，任何一个结构程序都可以由这三种基本控制结构来表示。
顺序结构 顺序结构表示程序中的各操作是按照它们出现的先后顺序执行的。
选择结构（分支结构） 选择结构表示程序的处理步骤出现了分支，它需要根据某一特定的条件选择其中的一个分支执行。选择结构有单分支、二分支和多分支三种形式。
  条件语句的构成
在Python当中，条件语句一般由if，else，elif组成。根据其组成的分支数量不同，可分为单分支结构、二分支结构和多分支结构。
  单分支结构
单分支结构由一个if语句组成，如果条件成立则执行指定的语句块；如果条件不成立则不执行任何语句块，直接进入条件语句之后的语句。
单分支结构流程图，如下
单分支结构的写法
  if语句后面要跟随条件表达式。
  if条件语句后面必须跟英文冒号（:），表示条件语句成立后年需要执行的程序的开始。
  条件成立时运行的语句块必须缩进。
  不在条件语句执行模块里面的后续语句不能缩进，必须和if条件语句保持同一缩进。
  前面语句 if 条件表达式: 语句1 语句2 ... 语句n 后续语句 例子：
a = 10 if a &amp;gt; 0: print(&amp;#39;a为整数&amp;#39;) print(&amp;#39;程序结束&amp;#39;)   二分支结构
二分支结构，也有一个if语句，但和单分支结构不同的是，二分支结构有条件成立和条件不成立两种情况。
二分支结构流程图，如下
例子：
a = 10 if a &amp;gt; 0: print(&amp;#39;a为整数&amp;#39;) else: print(&amp;#39;a为0或者负数&amp;#39;) print(&amp;#39;程序结束&amp;#39;) 二分支结构，其格式为if&amp;hellip;else&amp;hellip;
  多分支结构</description>
    </item>
    
    <item>
      <title>第九课 字典</title>
      <link>https://kwazii.top/kids/python/chapter-9/</link>
      <pubDate>Thu, 09 Jun 2022 10:12:14 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-9/</guid>
      <description>本节目标 什么是字典 Python中的字典指的是一种可变的容器类型，而且它可以装任意类型对象。
字典由多个键值对组成，每个元素都分为键和值两部分。
键是字典中进行读取及赋值的重要标记，要求有唯一性，通常为整数或字符串；
值可以是任意类型，不要求唯一性
字典的创建 字典的创建有多种方式，最常用的两种
  {&amp;lsquo;apple&amp;rsquo;: 8, &amp;lsquo;banana&amp;rsquo;:4.5}
  dict()
  访问字典里的值 由于字典没有索引，所以我们不能使用索引的方法来访问字典
  使用字典名加键进行访问
&amp;gt;&amp;gt;&amp;gt;d = {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.5} &amp;gt;&amp;gt;&amp;gt;print(d[&amp;#39;apple&amp;#39;]) 8   使用字典中的get()函数进行访问
&amp;gt;&amp;gt;&amp;gt;d = {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.5} &amp;gt;&amp;gt;&amp;gt;print(d.get(&amp;#39;apple&amp;#39;)) 8   修改字典   修改已有的键的值
&amp;gt;&amp;gt;&amp;gt;d = {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.5} &amp;gt;&amp;gt;&amp;gt;d[&amp;#39;banana&amp;#39;] = 4   给字典添加新的键值对
&amp;gt;&amp;gt;&amp;gt;d = {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.5} &amp;gt;&amp;gt;&amp;gt;d[&amp;#39;pear&amp;#39;] = 6 &amp;gt;&amp;gt;&amp;gt;print(d) {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.</description>
    </item>
    
    <item>
      <title>第八课 字符串</title>
      <link>https://kwazii.top/kids/python/chapter-8/</link>
      <pubDate>Thu, 09 Jun 2022 03:15:39 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-8/</guid>
      <description>本节目标 字符串的特性 字符串是不可变序列的一种。
字符串的创建   name = &amp;ldquo;python&amp;rdquo;
  str(1234)
  序列的操作在字符串中的应用  字符串的访问 字符串的截取 len() in + max() min() sorted() index() count()  字符串特有的相关操作   转义字符
为了输出一些特殊的字符，比如引号、缩进、换行等，在大部分编程语言的字符串中都有转义字符。
转义字符由反斜杠 \ 开头
常用的转义字符如下：
   转义符 描述     \ 反斜杠（\）   &#39; 单引号（&#39;）   &amp;quot; 双引号（&amp;quot;）   \n 换行符（LF）   \r 回车符（CR）   \t 水平制表符（TAB）      格式化输出</description>
    </item>
    
    <item>
      <title>第七课 不可变序列-元组</title>
      <link>https://kwazii.top/kids/python/chapter-7/</link>
      <pubDate>Thu, 09 Jun 2022 02:31:05 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-7/</guid>
      <description>本节目标 什么是元组，它与列表有什么不同 元组也是序列的一种，元组与列表类似，但元组的元素不能修改。
元组的创建 有两种方式
  (&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;)
  tuple([&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;])
  序列的通用操作 参考上一章节中的序列通用操作
元组的操作  index() count() sorted()  特别注意   如果元组中只有一个元素，仍需要加逗号，否则该对象并非元组，如下所示
&amp;gt;&amp;gt;&amp;gt;a = (1) &amp;gt;&amp;gt;&amp;gt;b = (1,) &amp;gt;&amp;gt;&amp;gt;print(type(a)) &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; #a 为整数 &amp;gt;&amp;gt;&amp;gt;print(type(a)) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; #b 为元组   元组为不可变序列，所以列表的很多操作是无法在元组中使用的，比如更新元素，添加元素，删除元素等。
  元组使用sorted()进行排序后，会生成一个列表，而不是一个元组。
  总结回顾 本节介绍了Python的另一种序列-元组，元组是一种不可变序列。它具有序列的通用操作，同时又和可变序列-列表有些不同。要能正确的区分列表和元组的不同，理解可变序列和不可变序列的差别。在不同的应用场景下，使用不同的序列类型。当然目前只需要简单的知道它们的分别，随着学习的深入，它们就像眼镜，你会知道你在什么时候需要它们。</description>
    </item>
    
    <item>
      <title>第六课 可变序列-列表</title>
      <link>https://kwazii.top/kids/python/chapter-6/</link>
      <pubDate>Mon, 06 Jun 2022 22:29:46 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-6/</guid>
      <description>本节目标 什么是列表 列表是Python中内置的有序，可变序列。列表的数据项不需要具有相同的类型。
列表的创建 有两种方式
  [1,&amp;lsquo;a&amp;rsquo;,2]
  list(&amp;lsquo;Python&amp;rsquo;)
  序列的通用操作 所谓序列，指的是一块可存放多个值的连续内存空间，这些值按一定的顺序排列，可通过每个值所在的位置的编号（称为索引）访问他们。
Python中常见的序列有列表，元组，字符串，range对象，二进制序列等。
  序列的访问
列表是序列的一种，所以所有的元素都是有序号的，我们称序号为索引。
访问列表中的值，只需要使用列表变量名加上下标（索引）即可，如t[2], t[-3]
  序列的嵌套
列表中可以再嵌套列表，被嵌套的列表是作为一个整体看待的，所以其下标为一个，如下例所示。
&amp;gt;&amp;gt;&amp;gt;t = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [1, 2, 3], &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt;t[2] [1, 2, 3]   序列的截取
截取又称作切片，它需要使用两个索引下标来确定切片的起始位置和结束位置。格式为：变量名[头下标:尾下标:步长]，其中步长是可选参数，默认为1(注意步长不是长度)
头下标和尾下标也可以省略，需注意开闭区间问题
  序列的长度
&amp;gt;&amp;gt;&amp;gt;t = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [1, 2, 3], &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt;len(t) 4   检查元素是否包含在序列中
使用in命令进行判断，其返回值是布尔类型
&amp;gt;&amp;gt;&amp;gt;t = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [1, 2, 3], &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt;print(&amp;#39;a&amp;#39; in t) True   找出序列中的最大元素</description>
    </item>
    
    <item>
      <title>第五课 基本数据类型</title>
      <link>https://kwazii.top/kids/python/chapter-5/</link>
      <pubDate>Mon, 06 Jun 2022 22:14:57 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-5/</guid>
      <description>本节目标 对象、值与类型 对象是Python 中对数据的抽象。 Python 程序中的所有数据都是由对象或对象间关系来表示的。
每个对象都有各自的标识号、类型和值。一个对象被创建后，它的标识号就绝不会改变；你可以将其理解为该对象在内存中的地址。 &amp;lsquo;is&amp;rsquo; 运算符可以比较两个对象的标识号是否相同；id() 函数能返回一个代表其标识号的整数。
了解6个标准数据类型   数字(Numbers)
int(long在python3已废弃)
float
bool(布尔) python3新加入关键字True False
complex
  字符串(String)
  列表(List)
  元组(Tuple)
  字典(Dictionary)
  集合(Set)
  可变数据类型和不可变数据类型   可变数据类型
  列表
  集合
  字典
  当该数据类型的对应变量的值发生改变时，它对应的内存地址不会发生改变（也可以理解为，可变数据类型被创建后，内存里的数据是可以改变的）
  不可变数据类型
  数字
  字符串
  元组
  当该数据类型的对应变量的值发生改变时，它对应的内存地址也会发生改变（也可以理解为，不可变数据类型一旦被创建，其内存里的数据是不能改变的）
  总结回顾 本节内容非常简短，我们只需要了解一些关于类型的基本概念，在Python中有6种数据类型，数据类型分为可变和不可变两种。更为深入的知识将在后面的课程中一一进行介绍。</description>
    </item>
    
  </channel>
</rss>
