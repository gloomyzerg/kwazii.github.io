<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>少儿编程python on Kwazii.top</title>
    <link>https://kwazii.top/categories/%E5%B0%91%E5%84%BF%E7%BC%96%E7%A8%8Bpython/</link>
    <description>Recent content in 少儿编程python on Kwazii.top</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jun 2022 13:51:09 +0800</lastBuildDate><atom:link href="https://kwazii.top/categories/%E5%B0%91%E5%84%BF%E7%BC%96%E7%A8%8Bpython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第十八课 自定义函数的创建与调用</title>
      <link>https://kwazii.top/kids/python/chapter-18/</link>
      <pubDate>Sun, 12 Jun 2022 13:51:09 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-18/</guid>
      <description>本节目标 函数的返回值 即函数里代码的执行结果，将其返回给函数调用者。在Python中函数的返回值是可选的，利用return关键字返回函数的结果，函数的返回值可以是任何类型。当一组数据通过函数处理后得到另一组数据的情况时，我们就可以利用函数的返回值。它可以表示函数计算的结果，有时也可以用返回值表示函数处理的状态。总之，函数的返回值就是函数希望返回给调用者的数据。
def sum(a, b): return a+b result = sum(1,2) print(result) 3 全局变量和局部变量   函数外部定义的变量为全局变量。
  函数内部定义的变量为局部变量。
  局部变量的作用域仅在函数内部。
  当函数运行时，会先找局部变量，再找全局变量。
  global关键字：把一个局部变量转换为全局变量
  nonlocal关键字：使用外层的非全局变量
  为函数的参数和返回值指定类型 Python是动态类型语言，定义变量时不需要声明与指定类型，自定义函数的参数也是如此。
但在Python3.5之后的版本新增了对函数参数和返回值的类型指定，定义变量时也可以指定类型。
def f(a:int, b:str)-&amp;gt; str: c = a*b print(f) return f f(3, &amp;#34;kwazii&amp;#34;) 需要注意的是默认的Python解析器是不会检查这些类型的，这些类型声明只起到提示作用。
总结回顾 通过和上一节结合，这两节内容完整的介绍了Python中函数的声明与用法。函数是编程中非常重要的概念，现代编程离不开函数。函数是对一段代码（或算法）的封装。有了函数我们才可以更好的组织代码。利用函数可大大提高代码的可读性和可维护性，使我们阅读和修改代码变的更容易。虽然编程语言是一种与计算机打交道的语言，但使用编程语言背后的依然是人。在工程实践中，代码的可读性和可维护性的意义非常重要，甚至要远远大于编辑效率。高质量的代码总是容易阅读和修改的，因为这个世界唯一不变的就是变化本身。</description>
    </item>
    
    <item>
      <title>第十七课 函数的相关概念</title>
      <link>https://kwazii.top/kids/python/chapter-17/</link>
      <pubDate>Sat, 11 Jun 2022 09:13:27 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-17/</guid>
      <description>本节目标 函数的意义 在写一段程序的时候，可能需要多次用到同样的功能，如果每次都要重复写相同的代码，不仅会增加代码量，而且阅读与修改极不方便。如果把实现相同功能的代码作为一个代码块封装在一起，形成一个函数，每次需要时调用这个函数，就很方便了。
定义函数的代码如下所示：
def hello(): #def 关键字后面假函数名定义函数 print(&amp;#34;Hello World&amp;#34;) #函数体 hello() #调用函数 def hello(name): print(&amp;#34;Hello &amp;#34;+name) hello(&amp;#39;Kwazii&amp;#39;) 形参和实参 形参是一种形式上或意义上的参数，在定义函数时起到占位的作用。
实参是在函数调用时传入的实际参数，它会赋值给形参运行。
 位置参数  def f(x,y,z): print(x,y,z) f(1,2,3) 1 2 3 关键字参数  def f(x,y,z): print(x,y,z) f(y=2,z=3,x=1) 1 2 3 参数默认值  定义函数时，可以指定参数的默认值，调用函数时如果没有传对应的参数，则使用默认值
带默认值的参数必须定义在最后（在带默认值的参数后面不能再定义不带默认值的参数）
可变长参数  当不确定需要传入的值有多少个时，在定义形参时可以使用*args、**kwargs来表示。
def f(*args, **kwargs): print(args) print(kwargs) f(1,2,3,4,5,6) f(*[1,2,3,4,5,6]) f(1,2,3,4,5,6,x=1,y=2,z=3) f(1,2,3,4,5,6,**{&amp;#34;x&amp;#34;:1, &amp;#34;y&amp;#34;:2, &amp;#34;z&amp;#34;:3}) 匿名函数 lambda
总结回顾 本节介绍了Python中函数的基本概念，重要的是函数的参数概念。Python中函数有位置参数和关键词参数两种传参形式，这和其他编程语言有所不同。位置参数和关键词是可以混用的。还有可变长参数，我们在某些时候也会用到它。</description>
    </item>
    
    <item>
      <title>第十六课 核心函数</title>
      <link>https://kwazii.top/kids/python/chapter-16/</link>
      <pubDate>Fri, 10 Jun 2022 22:17:57 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-16/</guid>
      <description>本节目标 数学运算函数  abs() divmod() max() min() pow() round() sum()  类型转换函数  bool() int() float() str() ord() char() bin() hex() tuple() list() dict() set() enumerate() range() object()  序列操作函数  all() any() filter() map() next() sorted()  对象操作函数  help() dir() type() ascii() format() vars()  交互操作函数  print() input()  文件操作函数  open()  总结回顾 本节介绍了Python的69个内置函数中的最常用的函数。其实我们不必记住全部的内置函数的用法，且不同的Python版本内置函数也会有所不同。只需要知道它们的存在，在使用时去查询文档即可。再次重申一遍，查询文档是学习编程的重要技能，必须熟练掌握。</description>
    </item>
    
    <item>
      <title>第十五课 算法</title>
      <link>https://kwazii.top/kids/python/chapter-15/</link>
      <pubDate>Fri, 10 Jun 2022 22:13:17 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-15/</guid>
      <description>本节目标 算法与算法的表示   编程解决问题的一般过程
  分析问题，建立模型
在解决问题前，要对问题有清晰的分析和描述。描述的问题必须具备3个特征
 指明定义问题范畴的所有假设 清晰地说明已知的信息 说明合适解决问题，并根据分析情况构建数学模型    设计算法
确定让计算机怎样做
  实现算法
程序 = 数据结构+算法
 数据的存储：计算所需要的原始数据，需要存储在不同的变量中 计算的过程：首先必须确定解决问题的方法，接着要把该方法拆解为具体的步骤，并用程序能执行的指令来实现对应的步骤    验证结果
    算法及算法的表示方法
  算法的概念
算法就是对解决问题的方法的精确而完整的描述，即解决问题的方法和步骤。
  算法的特征
 有穷性：执行的步骤是有限的。 确定性：每个步骤的含义应该是确切的。 可行性：每个步骤是可行的，并且能在有限的时间内完成。 有0个或多个输入 有一个或多个输出    算法的3种表示方法
 自然语言 流程图 程序设计语言    算法的3种基本结构
 顺序结构 选择结构 循环结构      解析算法   解析算法的概念</description>
    </item>
    
    <item>
      <title>第十四课 异常处理</title>
      <link>https://kwazii.top/kids/python/chapter-14/</link>
      <pubDate>Fri, 10 Jun 2022 19:01:44 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-14/</guid>
      <description>本节目标 try&amp;hellip;except&amp;hellip;格式 当碰到错误语句，try代码块的剩余代码块会被忽略，except代码块的代码将被执行，示例如下
try: a = 8 / 0 print(a) except: print(&amp;#34;除数为0的错误&amp;#34;) try&amp;hellip;except&amp;hellip;except&amp;hellip;格式 当碰到错误语句，try代码块的剩余代码块会被忽略。根据错误的具体情况选择except代码块的代码执行，示例如下
try: a = int(input(&amp;#34;输入一个数&amp;#34;)) b = int(input(&amp;#34;输入另一个数&amp;#34;)) m = a/b print(&amp;#34;商是&amp;#34;,m) except ValueError: print(&amp;#34;输入的不是数字&amp;#34;) except ZeroDivisionError: print(&amp;#34;除数不能为0&amp;#34;) except: print(&amp;#34;其他错误&amp;#34;) try&amp;hellip;except&amp;hellip;else&amp;hellip;finally&amp;hellip;格式 当碰到错误语句，try代码块的剩余代码块会被忽略。执行except代码块，当try代码块没有错误时，try代码块执行完毕，执行else；不管try代码块是否有错误，finally代码块均要执行，示例如下
try: a = int(input(&amp;#34;输入一个数&amp;#34;)) b = int(input(&amp;#34;输入另一个数&amp;#34;)) m = a/b print(&amp;#34;商是&amp;#34;,m) except: print(&amp;#34;错误&amp;#34;) else: print(&amp;#34;正确&amp;#34;) finally: print(&amp;#34;程序错误&amp;#34;) 总结回顾 本节介绍了Python中的异常处理，异常在程序中是不可避免的，所以应当尽力处理所有的异常情况，以保证程序的健壮性。注意区分错误和异常的区别。
记住一个原则，当错误不可避免的发生时，应降低错误的影响。</description>
    </item>
    
    <item>
      <title>第十三课 数据处理</title>
      <link>https://kwazii.top/kids/python/chapter-13/</link>
      <pubDate>Fri, 10 Jun 2022 16:42:37 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-13/</guid>
      <description>写在前面 程序 = 数据结构 + 算法
程序无时无刻不在与数据打交道，数据结构是计算机组织、存储数据的方式。
数据结构：是指数据以及数据元素相互之间的联系。可以看作是相互之间存在着某种特定关系的数据元素的集合。
因此，可以把数据结构看成是带结构的数据元素的集合。
数据结构包括如下几个方面：
 逻辑结构：数据元素之间的逻辑关系，可以看作一个抽象出来的数据模型。 存储结构：数据元素及其关系在计算机存储器中的存储方式，也称为数据的物理结构，依赖于高级语言实现。 数据运算：施加在该数据上的操作，需要在对应的存储结构中用算法实现。  本节课就从最基础的数据结构开始
本节目标 一维数据 一维数据由对等关系的有序或无序数据构成，采用线性方式组织，对应数学中的数组的概念。
任何表现为序列或集合的对象都可以看作一维数据
在Python中，一维数据主要采用列表形式表示。
二维数据 二维数据由一组一维数据构成，是一维数据的组合形式，可以用二维列表表示。
列表的每个元素对应二维数据的一行，这个元素本身也是列表。
二维数据一般采用相同的数据类型存储数据。
简单的文件读写   csv格式
一维数据在存储时，常用分隔符将数据元素分割，用于保存数据的格式。
常用的分隔符
 空格 逗号 其他特殊符号（如；）  CSV格式就是采用逗号分隔元素，它是一种通用的、相对简单的文件格式被广泛应用，Excel，记事本等大部分编辑器支持直接读取或保存CSV格式的文件。CSV文件的扩展名为.csv
  文件操作
 open() read() readline() readlines() csv.reader() write() writelines()    总结回顾 本节介绍了两种最基本的数据结构一维数组和二维数组。同时我们第一次将程序中的数据保存下来。csv作为最简单的结构化数据格式有着大量的实际应用。通过将数据保存为csv格式，我们学习了如何用Python来操作文件的读写。所谓文件，本质上都是用来保存特定格式的数据的实体。不同的文件类型只是其中数据的编码和格式不同，我们通过已经进行抽象的文件操作，来读取和写入文件内容，再利用程序对文件的内容进行解析和处理，以达到数据处理的目的。
本节作业   成绩分析
请分别写出三个程序实现题目的三个要求
题目要求：
  将下表中的数据写入一个名为score.csv的文件
  读取文件score.csv中的数据，按照成绩进行排序，输出一份成绩排行榜
  读取文件score.csv中的数据，计算每个班级的平均分，并输出结果
     班级 姓名 成绩     1 张三 90   2 李四 56   1 王五 96   2 赵六 78   2 开心 99   1 小明 67   2 小强 89   1 果果 77   1 小美 65   2 小呆 60      </description>
    </item>
    
    <item>
      <title>第十二课 编码与数制</title>
      <link>https://kwazii.top/kids/python/chapter-12/</link>
      <pubDate>Fri, 10 Jun 2022 15:38:57 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-12/</guid>
      <description>本节目标 什么是编码 人们通常把用来表示信息的符号组合称为信息代码，而编制代码的过程称为信息编码。
在计算机中所有的信息都是采用二进制存储的，计算机存储的最小单位是位（bit 比特），每个二进制位只有0和1两种信息。
十进制与二进制   转换方法
  bin()
&amp;gt;&amp;gt;&amp;gt;bin(11) &amp;#39;0b1011&amp;#39; # 以0b开头的数字代码，表示一个二进制数   int()
&amp;gt;&amp;gt;&amp;gt;int(&amp;#39;0b1011&amp;#39;, 2) 11 &amp;gt;&amp;gt;&amp;gt;int(&amp;#39;1011&amp;#39;, 2) #可以省略0b 11   十进制与八进制   oct()
&amp;gt;&amp;gt;&amp;gt;oct(143) &amp;#39;0o217&amp;#39; # 以数字0字母o开头 &amp;gt;&amp;gt;&amp;gt;int(&amp;#39;0o217&amp;#39;, 8) 143 &amp;gt;&amp;gt;&amp;gt;int(&amp;#39;217&amp;#39;, 8) #也可以省略0o 143   十进制与十六进制   表示方法
十六进制数的特点是：有0，1，2，3，4，5，6，7，8，9，A，B，C，D，E，F共16个基本数码
  hex()
&amp;gt;&amp;gt;&amp;gt;hex(143) &amp;#39;0x8f&amp;#39; &amp;gt;&amp;gt;&amp;gt;int(&amp;#39;0x8f&amp;#39;, 16) 143 &amp;gt;&amp;gt;&amp;gt;int(&amp;#39;8f&amp;#39;, 8) #也可以省略0x 143   二进制与十六进制   互相转换
将二进制整数转化为十六进制数的方法：从低位开始4位1组，逐组转换，如果位数不够，左边补0
相反，将十六进制数转化为二进制数的方法：逐位转换，1位数转为4位二进制数（如果最左边有0，则忽略0）</description>
    </item>
    
    <item>
      <title>第十一课 计算思维</title>
      <link>https://kwazii.top/kids/python/chapter-11/</link>
      <pubDate>Fri, 10 Jun 2022 13:40:46 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-11/</guid>
      <description>写在前面 在此之前，我们学习了很多Python的基础理论知识，但或许我们有一个困惑，就是它们究竟有什么用。那么从本节开始，我们将要解决一些编程的实际问题。
本节目标 写一点真实的程序   剔除数字
  用户随意输入一段可能包含数字和字母的字符串
  删除字符串中的数字，然后输出一串没有数字的字符串
  输出的非数字的字符顺序不变
    数字转汉字
  用户输入一个1-9的任意数字，输出对应的汉字
  用户可重复输入数字，程序不退出
    求质数
 提示用户输入两个正整数，求出两个数之间的所有质数    总结回顾 首先，恭喜你熬出头了，终于写出了一些看起来有实际意义的应用程序了。
本节通过三个真实的需求，去了解编写程序过程。通过需求分析，问题拆解，程序设计，再将之前课程中的知识灵活运用、组合出一段代码。虽然这些代码看起来还很简单，但你要明白再复杂的程序，都是通过这些看似简单的功能点，一点点堆叠起来的。
编程的过程就是把一个复杂的问题拆解为一个个简单的问题并实现它。随着学习的深入，我们能解决越来越多的“简单问题”，并最终构建一个“复杂”的应用程序。
本节作业   出租车计价器
题目要求：
提示用户输入一个数字作为里程数（公里数）， 计算出称作出租车应该支付的费用
计算方式如下：
  3公里以内起步价10元
  超过3公里的部分，每公里2元
  超过12公里的，超过部分每公里加收50%的空驶费
    </description>
    </item>
    
    <item>
      <title>第十课 流程控制</title>
      <link>https://kwazii.top/kids/python/chapter-10/</link>
      <pubDate>Fri, 10 Jun 2022 00:51:45 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-10/</guid>
      <description>本节目标 程序的基本结构 结构化程序设计思想是最早由E.W.Dijikstra在1965年提出的，结构化程序设计思想确实使程序执行效率提高。程序的出错率和维护费用大大减少。结构程序设计就是一种进行程序设计的原则和方法，按照这种原则和方法可设计出结构清晰、容易理解、容易修改、容易验证的程序。结构化程序设计的目标在于使程序具有一个合理结构，以保证和验证程序的正确性，从而开发出正确、合理的程序。
结构化程序设计，主要有以下三种基本结构：顺序结构、选择结构（分支结构）和循环结构，由这三种基本结构可以组合出任意复杂的程序。换句话说，任何一个结构程序都可以由这三种基本控制结构来表示。
顺序结构 顺序结构表示程序中的各操作是按照它们出现的先后顺序执行的。
选择结构（分支结构） 选择结构表示程序的处理步骤出现了分支，它需要根据某一特定的条件选择其中的一个分支执行。选择结构有单分支、二分支和多分支三种形式。
  条件语句的构成
在Python当中，条件语句一般由if，else，elif组成。根据其组成的分支数量不同，可分为单分支结构、二分支结构和多分支结构。
  单分支结构
单分支结构由一个if语句组成，如果条件成立则执行指定的语句块；如果条件不成立则不执行任何语句块，直接进入条件语句之后的语句。
单分支结构流程图，如下
单分支结构的写法
  if语句后面要跟随条件表达式。
  if条件语句后面必须跟英文冒号（:），表示条件语句成立后年需要执行的程序的开始。
  条件成立时运行的语句块必须缩进。
  不在条件语句执行模块里面的后续语句不能缩进，必须和if条件语句保持同一缩进。
  前面语句 if 条件表达式: 语句1 语句2 ... 语句n 后续语句 例子：
a = 10 if a &amp;gt; 0: print(&amp;#39;a为整数&amp;#39;) print(&amp;#39;程序结束&amp;#39;)   二分支结构
二分支结构，也有一个if语句，但和单分支结构不同的是，二分支结构有条件成立和条件不成立两种情况。
二分支结构流程图，如下
例子：
a = 10 if a &amp;gt; 0: print(&amp;#39;a为整数&amp;#39;) else: print(&amp;#39;a为0或者负数&amp;#39;) print(&amp;#39;程序结束&amp;#39;) 二分支结构，其格式为if&amp;hellip;else&amp;hellip;
  多分支结构</description>
    </item>
    
    <item>
      <title>第九课 字典</title>
      <link>https://kwazii.top/kids/python/chapter-9/</link>
      <pubDate>Thu, 09 Jun 2022 10:12:14 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-9/</guid>
      <description>本节目标 什么是字典 Python中的字典指的是一种可变的容器类型，而且它可以装任意类型对象。
字典由多个键值对组成，每个元素都分为键和值两部分。
键是字典中进行读取及赋值的重要标记，要求有唯一性，通常为整数或字符串；
值可以是任意类型，不要求唯一性
字典的创建 字典的创建有多种方式，最常用的两种
  {&amp;lsquo;apple&amp;rsquo;: 8, &amp;lsquo;banana&amp;rsquo;:4.5}
  dict()
  访问字典里的值 由于字典没有索引，所以我们不能使用索引的方法来访问字典
  使用字典名加键进行访问
&amp;gt;&amp;gt;&amp;gt;d = {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.5} &amp;gt;&amp;gt;&amp;gt;print(d[&amp;#39;apple&amp;#39;]) 8   使用字典中的get()函数进行访问
&amp;gt;&amp;gt;&amp;gt;d = {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.5} &amp;gt;&amp;gt;&amp;gt;print(d.get(&amp;#39;apple&amp;#39;)) 8   修改字典   修改已有的键的值
&amp;gt;&amp;gt;&amp;gt;d = {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.5} &amp;gt;&amp;gt;&amp;gt;d[&amp;#39;banana&amp;#39;] = 4   给字典添加新的键值对
&amp;gt;&amp;gt;&amp;gt;d = {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.5} &amp;gt;&amp;gt;&amp;gt;d[&amp;#39;pear&amp;#39;] = 6 &amp;gt;&amp;gt;&amp;gt;print(d) {&amp;#39;apple&amp;#39;: 8, &amp;#39;banana&amp;#39;: 4.</description>
    </item>
    
    <item>
      <title>第八课 字符串</title>
      <link>https://kwazii.top/kids/python/chapter-8/</link>
      <pubDate>Thu, 09 Jun 2022 03:15:39 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-8/</guid>
      <description>本节目标 字符串的特性 字符串是不可变序列的一种。
字符串的创建   name = &amp;ldquo;python&amp;rdquo;
  str(1234)
  序列的操作在字符串中的应用  字符串的访问 字符串的截取 len() in + max() min() sorted() index() count()  字符串特有的相关操作   转义字符
为了输出一些特殊的字符，比如引号、缩进、换行等，在大部分编程语言的字符串中都有转义字符。
转义字符由反斜杠 \ 开头
常用的转义字符如下：
   转义符 描述     \ 反斜杠（\）   &#39; 单引号（&#39;）   &amp;quot; 双引号（&amp;quot;）   \n 换行符（LF）   \r 回车符（CR）   \t 水平制表符（TAB）      格式化输出</description>
    </item>
    
    <item>
      <title>第七课 不可变序列-元组</title>
      <link>https://kwazii.top/kids/python/chapter-7/</link>
      <pubDate>Thu, 09 Jun 2022 02:31:05 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-7/</guid>
      <description>本节目标 什么是元组，它与列表有什么不同 元组也是序列的一种，元组与列表类似，但元组的元素不能修改。
元组的创建 有两种方式
  (&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;)
  tuple([&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;])
  序列的通用操作 参考上一章节中的序列通用操作
元组的操作  index() count() sorted()  特别注意   如果元组中只有一个元素，仍需要加逗号，否则该对象并非元组，如下所示
&amp;gt;&amp;gt;&amp;gt;a = (1) &amp;gt;&amp;gt;&amp;gt;b = (1,) &amp;gt;&amp;gt;&amp;gt;print(type(a)) &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; #a 为整数 &amp;gt;&amp;gt;&amp;gt;print(type(a)) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; #b 为元组   元组为不可变序列，所以列表的很多操作是无法在元组中使用的，比如更新元素，添加元素，删除元素等。
  元组使用sorted()进行排序后，会生成一个列表，而不是一个元组。
  总结回顾 本节介绍了Python的另一种序列-元组，元组是一种不可变序列。它具有序列的通用操作，同时又和可变序列-列表有些不同。要能正确的区分列表和元组的不同，理解可变序列和不可变序列的差别。在不同的应用场景下，使用不同的序列类型。当然目前只需要简单的知道它们的分别，随着学习的深入，它们就像眼镜，你会知道你在什么时候需要它们。</description>
    </item>
    
    <item>
      <title>第六课 可变序列-列表</title>
      <link>https://kwazii.top/kids/python/chapter-6/</link>
      <pubDate>Mon, 06 Jun 2022 22:29:46 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-6/</guid>
      <description>本节目标 什么是列表 列表是Python中内置的有序，可变序列。列表的数据项不需要具有相同的类型。
列表的创建 有两种方式
  [1,&amp;lsquo;a&amp;rsquo;,2]
  list(&amp;lsquo;Python&amp;rsquo;)
  序列的通用操作 所谓序列，指的是一块可存放多个值的连续内存空间，这些值按一定的顺序排列，可通过每个值所在的位置的编号（称为索引）访问他们。
Python中常见的序列有列表，元组，字符串，range对象，二进制序列等。
  序列的访问
列表是序列的一种，所以所有的元素都是有序号的，我们称序号为索引。
访问列表中的值，只需要使用列表变量名加上下标（索引）即可，如t[2], t[-3]
  序列的嵌套
列表中可以再嵌套列表，被嵌套的列表是作为一个整体看待的，所以其下标为一个，如下例所示。
&amp;gt;&amp;gt;&amp;gt;t = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [1, 2, 3], &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt;t[2] [1, 2, 3]   序列的截取
截取又称作切片，它需要使用两个索引下标来确定切片的起始位置和结束位置。格式为：变量名[头下标:尾下标:步长]，其中步长是可选参数，默认为1(注意步长不是长度)
头下标和尾下标也可以省略，需注意开闭区间问题
  序列的长度
&amp;gt;&amp;gt;&amp;gt;t = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [1, 2, 3], &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt;len(t) 4   检查元素是否包含在序列中
使用in命令进行判断，其返回值是布尔类型
&amp;gt;&amp;gt;&amp;gt;t = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [1, 2, 3], &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt;print(&amp;#39;a&amp;#39; in t) True   找出序列中的最大元素</description>
    </item>
    
    <item>
      <title>第五课 基本数据类型</title>
      <link>https://kwazii.top/kids/python/chapter-5/</link>
      <pubDate>Mon, 06 Jun 2022 22:14:57 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-5/</guid>
      <description>本节目标 对象、值与类型 对象是Python 中对数据的抽象。 Python 程序中的所有数据都是由对象或对象间关系来表示的。
每个对象都有各自的标识号、类型和值。一个对象被创建后，它的标识号就绝不会改变；你可以将其理解为该对象在内存中的地址。 &amp;lsquo;is&amp;rsquo; 运算符可以比较两个对象的标识号是否相同；id() 函数能返回一个代表其标识号的整数。
了解6个标准数据类型   数字(Numbers)
int(long在python3已废弃)
float
bool(布尔) python3新加入关键字True False
complex
  字符串(String)
  列表(List)
  元组(Tuple)
  字典(Dictionary)
  集合(Set)
  可变数据类型和不可变数据类型   可变数据类型
  列表
  集合
  字典
  当该数据类型的对应变量的值发生改变时，它对应的内存地址不会发生改变（也可以理解为，可变数据类型被创建后，内存里的数据是可以改变的）
  不可变数据类型
  数字
  字符串
  元组
  当该数据类型的对应变量的值发生改变时，它对应的内存地址也会发生改变（也可以理解为，不可变数据类型一旦被创建，其内存里的数据是不能改变的）
  总结回顾 本节内容非常简短，我们只需要了解一些关于类型的基本概念，在Python中有6种数据类型，数据类型分为可变和不可变两种。更为深入的知识将在后面的课程中一一进行介绍。</description>
    </item>
    
    <item>
      <title>第四课 turtle库</title>
      <link>https://kwazii.top/kids/python/chapter-4/</link>
      <pubDate>Thu, 02 Jun 2022 17:46:09 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-4/</guid>
      <description>写在前面  Python这门语言也被称作“胶水语言”，可用于连接多个小的甚至不兼容的部件，整合不同的库或代码。Python最大的特征就是有非常丰富的库，并且语法简单易懂，因而深受大家的喜爱。那么说到丰富的库，Numpy、Pandas、Matplotlib、TensorFlow、Scrapy等等这些大名鼎鼎的库，在科学计算、自动化、大数据、人工智能等领域发挥着至关重要的作用。虽然这些离我们现在的学习来说可能还比较遥远，但万丈高楼平地起，让我们从最基础的知识开始慢慢来了解Python这门语言，感受它的魅力。
  废话不多说，我们现在就进入今天这节课，可能是你接触的第一个Python库 turtle。
  turtle官方文档
 本节目标 坐标系   画布在屏幕中的坐标系
画布的（0，0）坐标位于屏幕的左上方。 最小单位为像素。
setup() 设置画布大小及位置，函数签名：turtle.setup(width, height, startx, starty)
  画笔在画布中的坐标系
画笔在画布中的坐标系和画布在屏幕中的坐标系是不一样的，最大的不同是画布的正中心是坐标系的原点（0，0）
  运动体系   turtle的相对方向
 小海龟（画笔）在画布上是有方向的，默认的小海龟的头部是朝向画布的右方。 小海龟（画笔）的方向会随着画笔方向的改变进行改变。    turtle的绝对方向
  绝对方向是不变的
  绝对方向的划分，以屏幕右方为0度的起点，沿x轴逆时针转动，如下图所示
    相关函数
 goto() forward() backward() left() right() setheading() speed() home() dot() circle()    画笔体系   画笔相关函数
 pensize() penup() pendown() hideturtle() showturtle() shape() write()    与颜色相关的函数</description>
    </item>
    
    <item>
      <title>第三课 运算符</title>
      <link>https://kwazii.top/kids/python/chapter-3/</link>
      <pubDate>Wed, 01 Jun 2022 18:29:26 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-3/</guid>
      <description>本节目标 算数运算符 与数学运算符的比较
   名称 数学 Python 作用     加 + + 把两个对象相加，或拼接字符串   减 - - 把两个对象相减   乘 X * 把两个数相乘，或是放回一个被重复若干次的字符串   除 ➗ / 把两个对象相除，商是小数（能整除也保留一位小数）   取整除  // 取两个数相除的商（整数部分）   取模  % 取两个数相除的余数   幂  ** 取x的n次方    重点：
  其中的加和乘可用于字符串类型的运算
  取整除（//）是向下取整，不是四舍五入, 例如24//5的结果是4，而不是5
  取模（%）如果能整除，则取模的结果为0
  赋值运算符    运算符 描述 例子 作用     = 赋值运算符 a = 5 把5赋值给变量a   += 加法赋值运算符 a += b 相当于a = a + b   -= 减法赋值运算符 a -= b 相当于a = a - b   *= 乘法赋值运算符 a *= b 相当于a = a * b   /= 除法赋值运算符 a /= b 相当于a = a / b   %= 取模赋值运算符 a %= b 相当于a = a % b   **= 幂赋值运算符 a **= b 相当于a = a ** b   //= 取整除赋值运算符 a //= b 相当于a = a // b    除了 = 运算符，剩余的运算符都是相应的简写模式</description>
    </item>
    
    <item>
      <title>第二课 编程基础</title>
      <link>https://kwazii.top/kids/python/chapter-2/</link>
      <pubDate>Wed, 01 Jun 2022 01:25:57 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-2/</guid>
      <description>本节目标 print()函数   作用：打印输出，在屏幕上显示出要打印的信息
  用法
 打印字符串  &amp;gt;&amp;gt;&amp;gt;print(&amp;#34;hello&amp;#34;) hello  打印数字  &amp;gt;&amp;gt;&amp;gt;print(4+6) 10  打印变量  &amp;gt;&amp;gt;&amp;gt;coding = &amp;#34;Python3&amp;#34; &amp;gt;&amp;gt;&amp;gt;print(coding) Python3  输出多个内容  &amp;gt;&amp;gt;&amp;gt;a = &amp;#34;hello&amp;#34; &amp;gt;&amp;gt;&amp;gt;b = &amp;#34;world&amp;#34; &amp;gt;&amp;gt;&amp;gt;print(a, b) # 注意单词之间有空格 hello world  换行  &amp;gt;&amp;gt;&amp;gt;print(&amp;#34;你好&amp;#34;, end =&amp;#34;,&amp;#34;) &amp;gt;&amp;gt;&amp;gt;print(&amp;#34;kwazii&amp;#34;) # 运行结果 你好,kwazii  多行输出  &amp;gt;&amp;gt;&amp;gt;print(&amp;#39;&amp;#39;&amp;#39; 第一行 第二行 第三行 &amp;#39;&amp;#39;&amp;#39;) 第一行 第二行 第三行  转义符  &amp;gt;&amp;gt;&amp;gt;print(&amp;#39;I\&amp;#39;m Kwazii&amp;#39;) I&amp;#39;m Kwazii   关于引号，单引号和双引号，三引号   所有引号必须是英文半角引号</description>
    </item>
    
    <item>
      <title>第一课 编程环境搭建</title>
      <link>https://kwazii.top/kids/python/chapter-1/</link>
      <pubDate>Tue, 31 May 2022 14:18:57 +0800</pubDate>
      
      <guid>https://kwazii.top/kids/python/chapter-1/</guid>
      <description>课前准备 搭建Python编程环境   下载Python 在电脑浏览器中打开Python官网https://www.python.org/
点击下图中红框中按钮即可现在最新的python安装包 (由于使用的操作系统不同，页面显示可能不完全一致，Python的版本也可能和图中不一致，此课程当前使用的版本为3.10.4，但不影响此课程学习。)
  安装Python
双击刚才下载的安装包进行安装，如图所示
打开安装包后会看到此窗口，注意先勾选下方红框Add Python 3.10 to PATH，然后点击上方红框Install Now进行安装
耐心等待，看到如下图的提示说明安装完成，点击close关闭即可
  打开并检查Python是否安装成功
完成上述步骤之后，在键盘上按win+r键打开运行，输入cmd，点击确定，如下图所示
将会打开命令行窗口，输入python回车，如果看到如下图显示则说明pyhton已安装成功
接下来我们找到启动python的入口
以windows系统为例，点击桌面左下方开始图标，在其中找到Python文件夹，点击其中IDLE，你将会看到Python IDLE窗口，如下图
到此Python编程环境的安装就已经全部完成了，再次说明由于操作系统或安装日期的不同，所显示的内容可能不完全和以上图中一致。但只要流程相同均不影响此课程的学习。
（因考虑普遍需求，以上操作均已windows操作系统为例。之后本课程的演示均为MacOS系统，如无特殊说明操作流程一致。）
如安装遇到问题，可以联系我。
下面我们正式开始Python课程的学习。祝你好运！
  本节目标 了解Python的集成开发环境（IDE）   什么是集成开发环境
集成开发环境简称IDE（Integrated Development Environment），是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套件。在我们课前准备中，我们已经完成了Python的安装。Python安装之后会自带一个名为IDLE的集成开发环境。
  Python可用的IDE有那些
除了Python自带的IDLE之外，常用的IDE和编辑器还有很多。例如VSCode，pycharm， Jupyter Notebook等等。初学者不必纠结使用何种工具，专注于代码本身更为重要。
  Thonny IDE（推荐）
除了Python自带的IDLE以外，这里向初学者也推荐另一个IDE&amp;ndash;Thonny。
Thonny的安装就相对简单的多，只需要在官网下载对应操作系统的版本，下载完成后打开安装。安装过程全部默认下一步就可以完成安装了。
在课程演示中，我们也会使用到Thonny，所以Thonny的具体使用方法会在演示时介绍。
特别注意，无论在实际编写代码时使用何种IDE，Python官方自带的IDLE的基本使用是必须掌握的内容。
  掌握IDLE的两种模式   IDLE的两种模式
为了简化开发的复杂性，初学者不必纠结使用的工具。因此对于我们初学者来说使用Python自带的IDLE足以完成我们的学习。
使用IDLE进行Python开发，首先我们要了解的是IDLE的两种模式。即脚本模式（又称为编辑器模式）和交互模式（又称为Shell模式）
这两种模式的界面如下图, 左边👈为脚本模式，右边👉为交互模式
  IDLE两种模式的切换方法
切换方法：新建文件即可。
交互模式的提示符是 &amp;gt; &amp;gt; &amp;gt;，脚本模式没有提示符。</description>
    </item>
    
  </channel>
</rss>
